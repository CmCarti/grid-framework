
/*
III. Layout
	Next generation grid system.
	The basic idea is to have the elements within the container use a class to specify their grid column width.
	There is a 12 columns grid container called container-12col. Cells within will have names like col-*. 
	There are also common premade layouts. 
1. Container
2. Container Grid
3. Common Layouts


1. Container
	Custom layouts may then be defined by the contents of the container in the custom stylesheet
*/
.container {
	margin: auto;
	padding: 1rem;
	display: grid;
	width: 100%;
	grid-row-gap: $grid-gap;
	@include md{ max-width: map-get($container-max-widths, md); }
    @include lg{ max-width: map-get($container-max-widths, lg); }
    @include xl{ max-width: map-get($container-max-widths, xl); }
}

/*
2. Container Grid
	This acts like a bootstrap grid if needed for quick layout 
*/
.container.grid-12-columns {
	display: block;
	@include md {
		display: grid;
		grid-template-columns: repeat(12, 1fr);
		grid-auto-flow: dense;		
		.col-2 { grid-column: span 2; }
		.col-3 { grid-column: span 3; }
		.col-4 { grid-column: span 4; }
		.col-5 { grid-column: span 5; }
		.col-6 { grid-column: span 6; }
		.col-7 { grid-column: span 7; }
		.col-8 { grid-column: span 8; }
		.col-9 { grid-column: span 9; }
		.col-10 { grid-column: span 10; }
		.col-11 { grid-column: span 11; }
		.col-12 { grid-column: span 12; }
	}
	@include lg { grid-template-columns: repeat(12, 1fr); }
}
[class*="col-"] {
	margin-bottom: 1rem;
	padding-left: $grid-gap / 2;
	padding-right: $grid-gap /2;
	
	// max-width: 100%;
	@include md {
		margin: 0;
	}
}


/* 
3. Common Layouts
	These layouts can be accessed with their associated class
*/
.container.sidebar-content-layout {
	grid-template-areas: "sidebar content content content";
	.sidebar { grid-area: sidebar; }
	.content { grid-area: content; }	
}